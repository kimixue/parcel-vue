'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var imageSize = require('image-size');
var imageSizeAsPromise = _bluebird2.default.promisify(imageSize);

exports.default = function () {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    return function imgAutosize(tree) {
        options.root = options.root || './';
        options.processEmptySize = options.processEmptySize === undefined ? false : options.processEmptySize;

        var promises = [];
        tree.match({ tag: 'img' }, function (imgNode) {
            var imgTagAttrs = imgNode.attrs || {};
            var imgSrc = imgTagAttrs.src;
            if (!imgSrc) {
                return imgNode;
            }

            var isWidthDefined = options.processEmptySize ? isSizeDefined(imgTagAttrs.width) : imgTagAttrs.width !== 'auto';
            var isHeightDefined = options.processEmptySize ? isSizeDefined(imgTagAttrs.height) : imgTagAttrs.height !== 'auto';
            if (isWidthDefined && isHeightDefined) {
                return imgNode;
            }

            var imgUrl = _url2.default.parse(imgSrc);
            var image = imgUrl.host ? imgUrl : _path2.default.resolve(options.root, imgTagAttrs.src);

            var promise = getImageDimensions(image).then(function (dimensions) {
                if (!isWidthDefined) {
                    imgNode.attrs.width = dimensions.width;
                }

                if (!isHeightDefined) {
                    imgNode.attrs.height = dimensions.height;
                }

                imgNode.attrs = imgTagAttrs;
            });
            promises.push(promise);

            return imgNode;
        });

        return _bluebird2.default.all(promises).then(function () {
            return tree;
        });
    };
};

function getImageDimensions(image) {
    if (!image.host) {
        return imageSizeAsPromise(image);
    }

    return new _bluebird2.default(function (resolve, reject) {
        _http2.default.get(image, function (response) {
            var chunks = [];

            response.on('data', function (chunk) {
                return chunks.push(chunk);
            }).on('end', function () {
                return resolve(imageSize(Buffer.concat(chunks)));
            });
        }).on('error', reject);
    });
}

function isSizeDefined(value) {
    return !!value && value !== 'auto';
}